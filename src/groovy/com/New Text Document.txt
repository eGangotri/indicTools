package com.egangotri.db.db

import com.egangotri.constants.Constants
import com.egangotri.vo.WordMaster
import groovy.sql.GroovyRowResult
import groovy.sql.Sql
import org.apache.commons.lang3.StringUtils

/**
 * Created by user on 5/21/2016.
 */
class DBUtil {
    static Sql getConnection() {
        def username = 'root', database = 'MW_DICTIONARY', server = 'localhost'

        //
        String mySqlUrl = "jdbc:mysql://$server/$database"//?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC"
        // Create connection to MySQL with classic JDBC DriverManager.
        return Sql.newInstance(mySqlUrl, username, "", 'com.mysql.jdbc.Driver')

    }


    static List<GroovyRowResult> fetchRows(String query) {
        return getConnection().rows(query, 1, Constants.DICTIONARY_MAX_RESULTS_ALLOWED)
    }

    static WordMaster  findWord(int id) {
        WordMaster word
        GroovyRowResult result = getConnection().firstRow("select * from Word where id = $id")
        dbRowToWord(result)

    }

    static WordMaster dbRowToWord(GroovyRowResult row) {
        WordMaster word = new WordMaster()
        word.id = row.ID
        word.word = row.WORD
        word.meaning = row.MEANING
        word.wordInSLP = row.WORDINSLP
        word.wordinItrans = row.WORDINITRANS
        word.wordinDVN = row.WORDINDVN
        return word
    }

    static List<WordMaster> dbRowsToWord(List<GroovyRowResult> rows) {
        List<WordMaster> list = []
        rows.each{ row ->
            list << dbRowToWord(row)
        }
        return list
    }

    static ArrayList<WordMaster> findWord(int beginRowId, int endRowId) {
        List<GroovyRowResult> rows = fetchRows("select * from Word where id >= $beginRowId and id <= $endRowId")
        return dbRowsToWord(rows)
    }

    static ArrayList<WordMaster> findWord(String searchWord, String searchType) {

        // Please note.
        // In order to have Case-Sensitive Results, you must specify the
        // DB with a collate value of utf8_bin
        // Example : COLLATE=utf8_bin
        // Pls see below for more Info
        /*
         * DROP TABLE IF EXISTS `mw_dictionary`.`word_master`; CREATE TABLE
         * `mw_dictionary`.`word_master` ( `ID` int(10) unsigned NOT NULL
         * auto_increment, `WORD` varchar(50) collate utf8_bin NOT NULL default
         * '', `MEANING` varchar(2000) collate utf8_bin NOT NULL default '',
         * `WORDINSLP` varchar(50) collate utf8_bin NOT NULL default '',
         * `WORDINITRANS` varchar(50) collate utf8_bin NOT NULL default '',
         * `WORDINDVN` varchar(50) collate utf8_bin NOT NULL default '', PRIMARY
         * KEY (`ID`) ) ENGINE=InnoDB AUTO_INCREMENT=20308 DEFAULT CHARSET=utf8
         * COLLATE=utf8_bin COMMENT='InnoDB free: 6144 kB';
         */
        String query = "select * from Word "
        String predicate = " where "


        if (StringUtils.equalsIgnoreCase(searchType, Constants.LEFT)) {
            predicate += "wordInSLP like '$searchWord%' or wordinDVN like '$searchWord%' "
        } else if (StringUtils.equalsIgnoreCase(searchType, Constants.RIGHT)) {
            predicate += "wordInSLP like '%$searchWord' or wordinDVN like '%$searchWord' "
        } else if (StringUtils.equalsIgnoreCase(searchType, Constants.ALL)) {
            predicate += "wordInSLP like '%$searchWord%' or wordinDVN like '%$searchWord%' "
        } else {
            predicate += "wordInSLP = '$searchWord' or wordinDVN = '$searchWord' "
        }

        List<GroovyRowResult> rows = fetchRows(query+predicate)
        return dbRowsToWord(rows)
    }

//    public ArrayList<String> findSuggestions(String word, String encoding) {
//        ArrayList<String> suggestionList = new ArrayList<String>();
//
//        Criteria crit = getSession().createCriteria(WordMaster.class);
//        Criterion crit1 = Restrictions.like("wordInSLP", word + "%");
//        Criterion crit2 = Restrictions.like("wordinDVN", word + "%");
//        LogicalExpression orExp = Restrictions.or(crit1, crit2);
//        crit.add(orExp);
//        crit.setMaxResults(Constants.DICTIONARY_MAX_SUGGESTIONS_ALLOWED + 1);
//
//        ArrayList<WordMaster> list = (ArrayList<WordMaster>) crit.list();
//
//        if (list != null && list.size() > 0) {
//            for (WordMaster wm : list) {
//                suggestionList.add(wm.getWordInSLP());
//            }
//            return suggestionList;
//        }
//
//        return null;
//    }

}
